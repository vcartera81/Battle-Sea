@using BattleSea.Models
@using BattleSea.Models.Enums
@model Game
<html>
<head>
    <title>Sea Battle</title>
    <link href="~/Content/Site.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:400,500,400italic,500italic,700italic,700,900,900italic,300italic,300,100italic,100" rel="stylesheet" type="text/css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>

    <script src="/Scripts/jquery.signalR-2.2.0.js"></script>
    <script src="/signalr/hubs"></script>

    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css">
    @*<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>*@
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.0.4/angular.js">
    </script>
</head>
<body ng-app="battleSea" ng-controller="seaBattleController">
    <div class="battle">
        <div class="section" id="mine">
            <div class="tr-mesh" ng-show="model.YourTurn && model.State != 2"></div>
            <span class="whom-label">You</span>
            <div class="fieldArea">
                <div ng-repeat="cell in unpackedCells(model.You.BattleField.Field.Cells)"
                     class="battlefield-cell"
                     style="height: {{cellSize}}px;
                            width: {{cellSize}}px;
                            margin-left: {{getMarginLeft(cell)}}px;
                            margin-top: {{getMarginTop(cell)}}px;"
                     data-value="{{cell.State}}"
                     data-row="{{cell.Coordinate.Row}}"
                     data-column="{{cell.Coordinate.Column}}"></div>
            </div>
            @if (Model.State == GameState.Initialized)
            {
                <span ng-click="shuffleShips()" class="span-button" style="position: absolute; bottom: 0; margin-left: 40%;">Reposition</span>
            }
        </div>
        <div class="section" id="theirs">
            <div class="tr-mesh" ng-show="!model.YourTurn && model.State != 2"></div>
            <span class="whom-label">Opponent</span>
            <div class="fieldArea">
                <div ng-repeat="cell in unpackedCells(model.Opponent.BattleField.Field.Cells)"
                     class="battlefield-cell"
                     ng-class="{ 'cell-selectable': model.State == 1 }"
                     style="height: {{cellSize}}px;
                            width: {{cellSize}}px;
                            margin-left: {{getMarginLeft(cell)}}px;
                            margin-top: {{getMarginTop(cell)}}px;"
                     ng-click="fire($event)"
                     data-value="{{cell.State}}"
                     data-row="{{cell.Coordinate.Row}}"
                     data-column="{{cell.Coordinate.Column}}"></div>
            </div>
        </div>
    </div>
    <span class="span-button" ng-show="model.State == 0" ng-click="startGame()" style="display: inline-block; margin-left: 49%; position: absolute;">Start game!</span>
    <div ng-show="model.State == 2" style="position: fixed; width: 100%; height: 100%; top: 0; left: 0; background-color: rgba(255,255, 255, 0.5);">
        <span style="font-size: 18px; position: absolute; top: 50%; width: 100%; text-align: center;">Game over!<br />You {{gameOverResultWord}}!</span>
    </div>
    <div style="position: fixed; bottom: 0; right: 0; width: 300px; height: 200px; padding: 15px;">
        Games: @ViewBag.NumberOfGames, Players: @ViewBag.NumberOfPlayers
    </div>
    <script type="text/javascript">

        var battleSea = angular.module("battleSea", []);

        battleSea.controller("seaBattleController", ["$scope", "$http", "SRCallbacks", function ($scope, $http, srCallbacks) {
            var loadModel = function () {
                $http.post("@Url.Action("GetCurrentBattlefield")").then(function (data) {
                    $scope.model = data.data;
                    setCellSizeAndOffsets();
                });
            };

            loadModel();

            var setCellSizeAndOffsets = function () {
                $scope.cellSize = $(".fieldArea").height() / $scope.model.You.BattleField.Field.Cells.length;
                $scope.cellsLeftOffset = ($(".fieldArea").width() - ($scope.cellSize * $scope.model.You.BattleField.Field.Cells.length)) / 2;
            }

            var getColumnIndex = function (char) {
                return char.charCodeAt(0) - 65
            }

            $scope.unpackedCells = function (collection) {
                if (!$scope.model) return [];
                var unpacked = [];
                angular.forEach(collection, function (value, key) {
                    angular.forEach(value, function (v, k) {
                        unpacked.push(v);
                    });
                });
                return unpacked;
            }

            $scope.getMarginLeft = function (cell) {
                return getColumnIndex(cell.Coordinate.Column) * $scope.cellSize + $scope.cellsLeftOffset;
            }

            $scope.getMarginTop = function (cell) {
                return cell.Coordinate.Row * $scope.cellSize;
            }

            $scope.shuffleShips = function () {
                $http.post("@Url.Action("ShuffleShips")").then(function () {
                    loadModel();
                });
            }

            $scope.startGame = function () {
                $http.post("@Url.Action("Start")").then(function () {
                    loadModel();
                });
            }

            $scope.fire = function (e) {
                $http.post("@Url.Action("Fire")", {
                    Column: $(e.target).attr("data-column"),
                    Row: $(e.target).attr("data-row")
                }).then(function () {
                    loadModel();
                });
            }

            //-- signal R callbacks
            $scope.$on("opponentFire", function (event, args) {
                $scope.model.You.BattleField.Field.Cells[args.coordinate.Row][getColumnIndex(args.coordinate.Column)] = args.fireResult;
                $scope.$apply();
            });

            $scope.$on("lockField", function () {
                $scope.model.YourTurn = false;
                $scope.$apply();
            });

            $scope.$on("unlockField", function () {
                $scope.model.YourTurn = true;
                $scope.$apply();
            });

            $scope.$on("endGame", function (event, isWinner) {
                $scope.gameOverResultWord = isWinner ? "win" : "loose";
                $scope.model.State = 2;
                $scope.$apply();
            });

            $scope.$on("window-resize", function () {
                setCellSizeAndOffsets();
                $scope.$digest();
            });
        }]);

        battleSea.service("SRCallbacks", ["$rootScope", "$http", "$window", function ($rootScope, $http, $window) {
            $.connection.hub.start().done(function (hub) {
                $http.post("@Url.Action("RegisterPlayer")", { connection: hub.id });
            });

            $.connection.battleSeaHub.client.opponentFire = function (fireResult) {
                $rootScope.$broadcast("opponentFire", fireResult);
            };

            $.connection.battleSeaHub.client.lockField = function () {
                $rootScope.$broadcast("lockField");
            }

            $.connection.battleSeaHub.client.unlockField = function () {
                $rootScope.$broadcast("unlockField");
            }

            $.connection.battleSeaHub.client.surroundShip = function (sCells) {

            }

            $.connection.battleSeaHub.client.endGame = function (isWinner) {
                $rootScope.$broadcast("endGame", isWinner);
            }

            angular.element($window).on("resize", function () {
                $rootScope.$broadcast("window-resize");
            });
        }]);

    </script>
</body>
</html>
